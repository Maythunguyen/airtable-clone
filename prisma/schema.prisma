// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

//App domain

model Base {
  id        String  @id @default(cuid())
  name      String
  ownerId   String
  owner     User    @relation(fields: [ownerId], references: [id])
  tables    Table[]
  createdAt DateTime @default(now())
}

model Table {
	id        String   @id @default(cuid())
	name      String
	baseId    String
	base      Base     @relation(fields: [baseId], references: [id])
	columns   Column[]
	rows      Row[]
	views     View[]
	createdAt DateTime @default(now())

	@@index([baseId])
}

model Column {
	id        String      @id @default(cuid())
	tableId   String
	table     Table       @relation(fields: [tableId], references: [id])
	name      String
	type      ColumnType
	position  Int
	createdAt DateTime    @default(now())

	@@index([tableId, position])
}

enum ColumnType {
	TEXT
	NUMBER
}

model Row {
	id        String   @id @default(cuid())
	tableId   String
	table     Table    @relation(fields: [tableId], references: [id])

	/// JSONB where keys are columnIds and values are the cell values
	data      Json     @db.JsonB

	/// Computed full-text vector (added via SQL in migration)
	searchVec Unsupported("tsvector")?

	createdAt DateTime @default(now())

	@@index([tableId, id]) // seek pagination
	@@index([tableId, createdAt])
}

model View {
	id        String   @id @default(cuid())
	tableId   String
	table     Table    @relation(fields: [tableId], references: [id])
	name      String
	/// stores filters/sort/search/visibleColumns
	config    Json     @db.JsonB
	createdAt DateTime @default(now())

	@@index([tableId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
